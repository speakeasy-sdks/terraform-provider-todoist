// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/models/shared"
	"net/http"
)

// Attachment - Object for attachment object.
type Attachment struct {
	ResourceType *string `queryParam:"name=resource_type"`
	FileURL      *string `queryParam:"name=file_url"`
	FileType     *string `queryParam:"name=file_type"`
	FileName     *string `queryParam:"name=file_name"`
}

func (o *Attachment) GetResourceType() *string {
	if o == nil {
		return nil
	}
	return o.ResourceType
}

func (o *Attachment) GetFileURL() *string {
	if o == nil {
		return nil
	}
	return o.FileURL
}

func (o *Attachment) GetFileType() *string {
	if o == nil {
		return nil
	}
	return o.FileType
}

func (o *Attachment) GetFileName() *string {
	if o == nil {
		return nil
	}
	return o.FileName
}

type CreateCommentRequest struct {
	// Comment's task ID (for task comments). task_id or project_id required
	TaskID *string `queryParam:"style=form,explode=true,name=task_id"`
	// Comment's project ID (for project comments). task_id or project_id required
	ProjectID *string `queryParam:"style=form,explode=true,name=project_id"`
	// Comment content. This value may contain markdown-formatted text and hyperlinks.
	Content string `queryParam:"style=form,explode=true,name=content"`
	// Object for attachment object.
	Attachment *Attachment `queryParam:"style=form,explode=true,name=attachment"`
}

func (o *CreateCommentRequest) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *CreateCommentRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateCommentRequest) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateCommentRequest) GetAttachment() *Attachment {
	if o == nil {
		return nil
	}
	return o.Attachment
}

type CreateCommentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Comment created.
	Comment *shared.Comment
	// Unexpected error
	ErrorModel *shared.ErrorModel
}

func (o *CreateCommentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateCommentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateCommentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateCommentResponse) GetComment() *shared.Comment {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateCommentResponse) GetErrorModel() *shared.ErrorModel {
	if o == nil {
		return nil
	}
	return o.ErrorModel
}
