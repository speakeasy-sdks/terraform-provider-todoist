// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/types"
	"time"
)

type Due struct {
	// Human defined date in arbitrary format.
	String string `json:"string"`
	// Date in format YYYY-MM-DD corrected to user's timezone.
	Date types.Date `json:"date"`
	// Whether the task has a recurring due date.
	IsRecurring bool `json:"is_recurring"`
	// Only returned if exact due time set (i.e. it's not a whole-day task), date and time in RFC3339 format in UTC.
	Datetime *time.Time `json:"datetime,omitempty"`
	// Only returned if exact due time set, user's timezone definition either in tzdata-compatible format ("Europe/Berlin") or as a string specifying east of UTC offset as "UTCÂ±HH:MM" (i.e. "UTC-01:00").
	Timezone *string `json:"timezone,omitempty"`
}

func (d Due) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Due) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Due) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *Due) GetDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.Date
}

func (o *Due) GetIsRecurring() bool {
	if o == nil {
		return false
	}
	return o.IsRecurring
}

func (o *Due) GetDatetime() *time.Time {
	if o == nil {
		return nil
	}
	return o.Datetime
}

func (o *Due) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}
