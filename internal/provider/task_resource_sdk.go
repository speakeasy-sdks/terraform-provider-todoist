// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-todoist/internal/provider/types"
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/models/shared"
	"time"
)

func (r *TaskResourceModel) ToOperationsCreateTaskRequestBody() *operations.CreateTaskRequestBody {
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	projectID := new(string)
	if !r.ProjectID.IsUnknown() && !r.ProjectID.IsNull() {
		*projectID = r.ProjectID.ValueString()
	} else {
		projectID = nil
	}
	sectionID := new(string)
	if !r.SectionID.IsUnknown() && !r.SectionID.IsNull() {
		*sectionID = r.SectionID.ValueString()
	} else {
		sectionID = nil
	}
	parentID := new(string)
	if !r.ParentID.IsUnknown() && !r.ParentID.IsNull() {
		*parentID = r.ParentID.ValueString()
	} else {
		parentID = nil
	}
	order := new(int64)
	if !r.Order.IsUnknown() && !r.Order.IsNull() {
		*order = r.Order.ValueInt64()
	} else {
		order = nil
	}
	var labels []string = []string{}
	for _, labelsItem := range r.Labels {
		labels = append(labels, labelsItem.ValueString())
	}
	priority := new(int64)
	if !r.Priority.IsUnknown() && !r.Priority.IsNull() {
		*priority = r.Priority.ValueInt64()
	} else {
		priority = nil
	}
	dueString := new(string)
	if !r.DueString.IsUnknown() && !r.DueString.IsNull() {
		*dueString = r.DueString.ValueString()
	} else {
		dueString = nil
	}
	dueDate := new(string)
	if !r.DueDate.IsUnknown() && !r.DueDate.IsNull() {
		*dueDate = r.DueDate.ValueString()
	} else {
		dueDate = nil
	}
	dueDatetime := new(string)
	if !r.DueDatetime.IsUnknown() && !r.DueDatetime.IsNull() {
		*dueDatetime = r.DueDatetime.ValueString()
	} else {
		dueDatetime = nil
	}
	dueLang := new(string)
	if !r.DueLang.IsUnknown() && !r.DueLang.IsNull() {
		*dueLang = r.DueLang.ValueString()
	} else {
		dueLang = nil
	}
	assigneeID := new(string)
	if !r.AssigneeID.IsUnknown() && !r.AssigneeID.IsNull() {
		*assigneeID = r.AssigneeID.ValueString()
	} else {
		assigneeID = nil
	}
	durationAmount := new(int64)
	if !r.DurationAmount.IsUnknown() && !r.DurationAmount.IsNull() {
		*durationAmount = r.DurationAmount.ValueInt64()
	} else {
		durationAmount = nil
	}
	durationUnit := new(string)
	if !r.DurationUnit.IsUnknown() && !r.DurationUnit.IsNull() {
		*durationUnit = r.DurationUnit.ValueString()
	} else {
		durationUnit = nil
	}
	out := operations.CreateTaskRequestBody{
		Content:        content,
		Description:    description,
		ProjectID:      projectID,
		SectionID:      sectionID,
		ParentID:       parentID,
		Order:          order,
		Labels:         labels,
		Priority:       priority,
		DueString:      dueString,
		DueDate:        dueDate,
		DueDatetime:    dueDatetime,
		DueLang:        dueLang,
		AssigneeID:     assigneeID,
		DurationAmount: durationAmount,
		DurationUnit:   durationUnit,
	}
	return &out
}

func (r *TaskResourceModel) RefreshFromSharedTask(resp *shared.Task) {
	if resp != nil {
		r.AssigneeID = types.StringPointerValue(resp.AssigneeID)
		r.AssignerID = types.StringPointerValue(resp.AssignerID)
		r.CommentCount = types.Int64PointerValue(resp.CommentCount)
		r.Content = types.StringPointerValue(resp.Content)
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.CreatorID = types.StringPointerValue(resp.CreatorID)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.Due == nil {
			r.Due = nil
		} else {
			r.Due = &tfTypes.TaskDue{}
			if resp.Due.DueObject == nil {
				r.Due.DueObject = nil
			} else {
				r.Due.DueObject = &tfTypes.Due{}
				r.Due.DueObject.Date = types.StringValue(resp.Due.DueObject.Date.String())
				if resp.Due.DueObject.Datetime != nil {
					r.Due.DueObject.Datetime = types.StringValue(resp.Due.DueObject.Datetime.Format(time.RFC3339Nano))
				} else {
					r.Due.DueObject.Datetime = types.StringNull()
				}
				r.Due.DueObject.IsRecurring = types.BoolValue(resp.Due.DueObject.IsRecurring)
				r.Due.DueObject.String = types.StringValue(resp.Due.DueObject.String)
				r.Due.DueObject.Timezone = types.StringPointerValue(resp.Due.DueObject.Timezone)
			}
		}
		if resp.Duration == nil {
			r.Duration = nil
		} else {
			r.Duration = &tfTypes.TaskDuration{}
			if resp.Duration.DurationObject == nil {
				r.Duration.DurationObject = nil
			} else {
				r.Duration.DurationObject = &tfTypes.Duration{}
				r.Duration.DurationObject.Amount = types.Int64PointerValue(resp.Duration.DurationObject.Amount)
				r.Duration.DurationObject.Unit = types.StringPointerValue(resp.Duration.DurationObject.Unit)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.IsCompleted = types.BoolPointerValue(resp.IsCompleted)
		r.Labels = []types.String{}
		for _, v := range resp.Labels {
			r.Labels = append(r.Labels, types.StringValue(v))
		}
		r.Order = types.Int64PointerValue(resp.Order)
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.Priority = types.Int64PointerValue(resp.Priority)
		r.ProjectID = types.StringPointerValue(resp.ProjectID)
		r.SectionID = types.StringPointerValue(resp.SectionID)
		r.URL = types.StringPointerValue(resp.URL)
	}
}

func (r *TaskResourceModel) ToOperationsUpdateTaskRequestBody() *operations.UpdateTaskRequestBody {
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var labels []string = []string{}
	for _, labelsItem := range r.Labels {
		labels = append(labels, labelsItem.ValueString())
	}
	priority := new(int64)
	if !r.Priority.IsUnknown() && !r.Priority.IsNull() {
		*priority = r.Priority.ValueInt64()
	} else {
		priority = nil
	}
	dueString := new(string)
	if !r.DueString.IsUnknown() && !r.DueString.IsNull() {
		*dueString = r.DueString.ValueString()
	} else {
		dueString = nil
	}
	dueDate := new(string)
	if !r.DueDate.IsUnknown() && !r.DueDate.IsNull() {
		*dueDate = r.DueDate.ValueString()
	} else {
		dueDate = nil
	}
	dueDatetime := new(string)
	if !r.DueDatetime.IsUnknown() && !r.DueDatetime.IsNull() {
		*dueDatetime = r.DueDatetime.ValueString()
	} else {
		dueDatetime = nil
	}
	dueLang := new(string)
	if !r.DueLang.IsUnknown() && !r.DueLang.IsNull() {
		*dueLang = r.DueLang.ValueString()
	} else {
		dueLang = nil
	}
	assigneeID := new(string)
	if !r.AssigneeID.IsUnknown() && !r.AssigneeID.IsNull() {
		*assigneeID = r.AssigneeID.ValueString()
	} else {
		assigneeID = nil
	}
	durationAmount := new(int64)
	if !r.DurationAmount.IsUnknown() && !r.DurationAmount.IsNull() {
		*durationAmount = r.DurationAmount.ValueInt64()
	} else {
		durationAmount = nil
	}
	durationUnit := new(string)
	if !r.DurationUnit.IsUnknown() && !r.DurationUnit.IsNull() {
		*durationUnit = r.DurationUnit.ValueString()
	} else {
		durationUnit = nil
	}
	out := operations.UpdateTaskRequestBody{
		Content:        content,
		Description:    description,
		Labels:         labels,
		Priority:       priority,
		DueString:      dueString,
		DueDate:        dueDate,
		DueDatetime:    dueDatetime,
		DueLang:        dueLang,
		AssigneeID:     assigneeID,
		DurationAmount: durationAmount,
		DurationUnit:   durationUnit,
	}
	return &out
}
