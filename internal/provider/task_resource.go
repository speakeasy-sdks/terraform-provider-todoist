// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_int64planmodifier "github.com/speakeasy/terraform-provider-todoist/internal/planmodifiers/int64planmodifier"
	speakeasy_stringplanmodifier "github.com/speakeasy/terraform-provider-todoist/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/speakeasy/terraform-provider-todoist/internal/provider/types"
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk"
	"github.com/speakeasy/terraform-provider-todoist/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-todoist/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &TaskResource{}
var _ resource.ResourceWithImportState = &TaskResource{}

func NewTaskResource() resource.Resource {
	return &TaskResource{}
}

// TaskResource defines the resource implementation.
type TaskResource struct {
	client *sdk.SDK
}

// TaskResourceModel describes the resource data model.
type TaskResourceModel struct {
	AssigneeID     types.String          `tfsdk:"assignee_id"`
	AssignerID     types.String          `tfsdk:"assigner_id"`
	CommentCount   types.Int64           `tfsdk:"comment_count"`
	Content        types.String          `tfsdk:"content"`
	CreatedAt      types.String          `tfsdk:"created_at"`
	CreatorID      types.String          `tfsdk:"creator_id"`
	Description    types.String          `tfsdk:"description"`
	Due            *tfTypes.TaskDue      `tfsdk:"due"`
	DueDate        types.String          `tfsdk:"due_date"`
	DueDatetime    types.String          `tfsdk:"due_datetime"`
	DueLang        types.String          `tfsdk:"due_lang"`
	DueString      types.String          `tfsdk:"due_string"`
	Duration       *tfTypes.TaskDuration `tfsdk:"duration"`
	DurationAmount types.Int64           `tfsdk:"duration_amount"`
	DurationUnit   types.String          `tfsdk:"duration_unit"`
	ID             types.String          `tfsdk:"id"`
	IsCompleted    types.Bool            `tfsdk:"is_completed"`
	Labels         []types.String        `tfsdk:"labels"`
	Order          types.Int64           `tfsdk:"order"`
	ParentID       types.String          `tfsdk:"parent_id"`
	Priority       types.Int64           `tfsdk:"priority"`
	ProjectID      types.String          `tfsdk:"project_id"`
	SectionID      types.String          `tfsdk:"section_id"`
	URL            types.String          `tfsdk:"url"`
}

func (r *TaskResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_task"
}

func (r *TaskResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Task Resource",
		Attributes: map[string]schema.Attribute{
			"assignee_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The responsible user ID (only applies to shared tasks).`,
			},
			"assigner_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the user who assigned the task (read-only, will be null if the task is unassigned).`,
			},
			"comment_count": schema.Int64Attribute{
				Computed:    true,
				Description: `Number of task comments (read-only).`,
			},
			"content": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Task content. This value may contain markdown-formatted text and hyperlinks.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `The date when the task was created (read-only).`,
			},
			"creator_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the user who created the task (read-only).`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A description for the task. This value may contain markdown-formatted text and hyperlinks.`,
			},
			"due": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"due_object": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"date": schema.StringAttribute{
								Computed:    true,
								Description: `Date in format YYYY-MM-DD corrected to user's timezone.`,
								Validators: []validator.String{
									validators.IsValidDate(),
								},
							},
							"datetime": schema.StringAttribute{
								Computed:    true,
								Description: `Only returned if exact due time set (i.e. it's not a whole-day task), date and time in RFC3339 format in UTC.`,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"is_recurring": schema.BoolAttribute{
								Computed:    true,
								Description: `Whether the task has a recurring due date.`,
							},
							"string": schema.StringAttribute{
								Computed:    true,
								Description: `Human defined date in arbitrary format.`,
							},
							"timezone": schema.StringAttribute{
								Computed:    true,
								Description: `Only returned if exact due time set, user's timezone definition either in tzdata-compatible format ("Europe/Berlin") or as a string specifying east of UTC offset as "UTCÂ±HH:MM" (i.e. "UTC-01:00").`,
							},
						},
					},
				},
				Description: `Object representing task due date/time, or null if no date is set.`,
			},
			"due_date": schema.StringAttribute{
				Optional:    true,
				Description: `Specific date in YYYY-MM-DD format relative to the user's timezone.`,
			},
			"due_datetime": schema.StringAttribute{
				Optional:    true,
				Description: `Specific date and time in RFC3339 format in UTC.`,
			},
			"due_lang": schema.StringAttribute{
				Optional:    true,
				Description: `2-letter code specifying the language in case due_string is not written in English.`,
			},
			"due_string": schema.StringAttribute{
				Optional:    true,
				Description: `Human-defined task due date (ex. "next Monday," "Tomorrow"). Value is set using local (not UTC) time.`,
			},
			"duration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"duration_object": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"amount": schema.Int64Attribute{
								Computed:    true,
								Description: `A positive (greater than zero) integer for the amount of duration_unit the task will take, or null to unset. If specified, you must define a duration_unit.`,
							},
							"unit": schema.StringAttribute{
								Computed:    true,
								Description: `The unit of time that the duration field above represents, or null to unset. Must be either minute or day. If specified, duration must be defined as well.`,
							},
						},
					},
				},
				Description: `Object representing a task's duration, including a positive integer for the amount of time and the unit of time (minute or day). The object will be null if the task has no duration.`,
			},
			"duration_amount": schema.Int64Attribute{
				Optional:    true,
				Description: `A positive (greater than zero) integer for the amount of duration_unit the task will take. If specified, you must define a duration_unit.`,
			},
			"duration_unit": schema.StringAttribute{
				Optional:    true,
				Description: `The unit of time that the duration field above represents. Must be either minute or day. If specified, duration must be defined as well.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the task to delete.`,
			},
			"is_completed": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to mark completed tasks.`,
			},
			"labels": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `The task's labels (a list of names that may represent either personal or shared labels).`,
			},
			"order": schema.Int64Attribute{
				Computed: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
					speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Non-zero integer value used by clients to sort tasks under the same parent. Requires replacement if changed. `,
			},
			"parent_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Parent task ID. Requires replacement if changed. `,
			},
			"priority": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Task priority from 1 (normal) to 4 (urgent).`,
			},
			"project_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Task project ID. If not set, the task is put in the user's Inbox. Requires replacement if changed. `,
			},
			"section_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `ID of the section to put the task into. Requires replacement if changed. `,
			},
			"url": schema.StringAttribute{
				Computed:    true,
				Description: `URL to access this task in the Todoist web or mobile applications (read-only).`,
			},
		},
	}
}

func (r *TaskResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TaskResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *TaskResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToOperationsCreateTaskRequestBody()
	res, err := r.client.Tasks.CreateTask(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Task == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTask(res.Task)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	taskID := data.ID.ValueString()
	request1 := operations.GetActiveTaskRequest{
		TaskID: taskID,
	}
	res1, err := r.client.Tasks.GetActiveTask(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.Task == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedTask(res1.Task)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TaskResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *TaskResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	taskID := data.ID.ValueString()
	request := operations.GetActiveTaskRequest{
		TaskID: taskID,
	}
	res, err := r.client.Tasks.GetActiveTask(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Task == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTask(res.Task)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TaskResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *TaskResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	taskID := data.ID.ValueString()
	requestBody := *data.ToOperationsUpdateTaskRequestBody()
	request := operations.UpdateTaskRequest{
		TaskID:      taskID,
		RequestBody: requestBody,
	}
	res, err := r.client.Tasks.UpdateTask(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Task == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTask(res.Task)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	taskId1 := data.ID.ValueString()
	request1 := operations.GetActiveTaskRequest{
		TaskID: taskId1,
	}
	res1, err := r.client.Tasks.GetActiveTask(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.Task == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedTask(res1.Task)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TaskResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *TaskResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	taskID := data.ID.ValueString()
	request := operations.DeleteTaskRequest{
		TaskID: taskID,
	}
	res, err := r.client.Tasks.DeleteTask(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *TaskResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
